

#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_LSM6DS33.h>
#include <Adafruit_LSM6DS3TRC.h>
#include <TensorFlowLite_ESP32.h>
#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "tensorflow/lite/micro/all_ops_resolver.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"
#include "tensorflow/lite/micro/micro_interpreter.h"
#include "tensorflow/lite/schema/schema_generated.h"

#include "model.h"


const int ONBOARD_LED = 7; // the number of the onboard LED pin

const float ACCELERATION_RMS_THRESHOLD = 2.5;  // RMS (root mean square) threshold of significant motion in G's
const int NUM_CAPTURED_SAMPLES_PER_GESTURE = 119;
const int NUM_FEATURES_PER_SAMPLE = 6;
const int TOTAL_SAMPLES = NUM_CAPTURED_SAMPLES_PER_GESTURE * NUM_FEATURES_PER_SAMPLE;
const int THRESHOLD_SAMPLE_INDEX =  ((NUM_CAPTURED_SAMPLES_PER_GESTURE / 3) * NUM_FEATURES_PER_SAMPLE); // one-third of data comes before threshold

int capturedSamples = 0;

Adafruit_LSM6DS3TRC lsm6ds; 
Adafruit_Sensor *lsm_temp, *lsm_accel, *lsm_gyro;

sensors_event_t accel;
sensors_event_t gyro;

// global variables used for TensorFlow Lite (Micro)
tflite::MicroErrorReporter tflErrorReporter;

// pull in all the TFLM ops, you can remove this line and
// only pull in the TFLM ops you need, if would like to reduce
// the compiled size of the sketch.
static tflite::MicroMutableOpResolver<6> tflOpsResolver;
// tflite::AllOpsResolver tflOpsResolver;
tflOpsResolver.AddDepthwiseConv2D();
tflOpsResolver.AddFullyConnected();
tflOpsResolver.AddMaxPool2D();
tflOpsResolver.AddSoftmax();
tflOpsResolver.AddReshape();

const tflite::Model* tflModel = nullptr;
tflite::MicroInterpreter* tflInterpreter = nullptr;
TfLiteTensor* tflInputTensor = nullptr;
TfLiteTensor* tflOutputTensor = nullptr;

// Create a static memory buffer for TFLM, the size may need to
// be adjusted based on the model you are using
// constexpr int tensorArenaSize = 8 * 1024;
constexpr int tensorArenaSize = 8 * 1024;
byte tensorArena[tensorArenaSize];

// array to map gesture index to a name
const char* GESTURES[] = {
  "alohomora",
  "finite_incantatem",
  "arresto_momento"
};

#define NUM_GESTURES (sizeof(GESTURES) / sizeof(GESTURES[0]))

void setup()
{
  Serial.begin(115200);
  pinMode(ONBOARD_LED, OUTPUT);
  Wire.begin(4,5); // SDA connected to pin 5, SCL connected to pin 4
  if (!lsm6ds.begin_I2C(0x6A, &Wire))
  {
    Serial.println("Failed to find LSM6DS chip");
    while (1)
    {
      delay(10);
    }
  }
  lsm6ds.setAccelRange(LSM6DS_ACCEL_RANGE_8_G);
  lsm6ds.setAccelDataRate(LSM6DS_RATE_1_66K_HZ);

  lsm6ds.setGyroRange(LSM6DS_GYRO_RANGE_2000_DPS);
  lsm6ds.setGyroDataRate(LSM6DS_RATE_1_66K_HZ);
  //Serial.println("LSM6DS Found!");

  // lsm_accel = lsm6ds.getAccelerometerSensor();
  // lsm_accel->printSensorDetails();

  // lsm_gyro = lsm6ds.getGyroSensor();
  // lsm_gyro->printSensorDetails();
  Serial.println("aX,aY,aZ,gX,gY,gZ");

    // get the TFL representation of the model byte array
  tflModel = tflite::GetModel(model);
  if (tflModel->version() != TFLITE_SCHEMA_VERSION) {
    Serial.println("Model schema mismatch!");
    while (1);
  }

  // Create an interpreter to run the model
  tflInterpreter = new tflite::MicroInterpreter(tflModel, tflOpsResolver, tensorArena, tensorArenaSize, &tflErrorReporter);

  // Allocate memory for the model's input and output tensors
  tflInterpreter->AllocateTensors();

  // Get pointers for the model's input and output tensors
  tflInputTensor = tflInterpreter->input(0);
  tflOutputTensor = tflInterpreter->output(0);
}

void loop()
{
  float aX, aY, aZ, gX, gY, gZ;

  // wait for threshold trigger, but keep N samples before threshold occurs
  while (1) {
    // wait for both acceleration and gyroscope data to be available
    if (lsm6ds.accelerationAvailable() && lsm6ds.gyroscopeAvailable()) {
      // read the acceleration and gyroscope data
      lsm6ds.readAcceleration(aX, aY, aZ);
      lsm6ds.readGyroscope(gX, gY, gZ);

      // shift values over one position (TODO: replace memmove with for loop?)
      memmove(tflInputTensor->data.f, tflInputTensor->data.f + NUM_FEATURES_PER_SAMPLE, sizeof(float) * NUM_FEATURES_PER_SAMPLE * 39);

      // insert the new data at the threshold index
      tflInputTensor->data.f[THRESHOLD_SAMPLE_INDEX + 0] = (aX + 78.4)/156.8;
      tflInputTensor->data.f[THRESHOLD_SAMPLE_INDEX + 1] = (aY + 78.4)/156.8;
      tflInputTensor->data.f[THRESHOLD_SAMPLE_INDEX + 2] = (aZ + 78.4)/156.8;
      tflInputTensor->data.f[THRESHOLD_SAMPLE_INDEX + 3] = (gX + 40)/80;
      tflInputTensor->data.f[THRESHOLD_SAMPLE_INDEX + 4] = (gY + 40)/80;
      tflInputTensor->data.f[THRESHOLD_SAMPLE_INDEX + 5] = (gZ + 40)/80;

      // calculate the RMS of the acceleration
      float accelerationRMS =  sqrt(fabs(aX) + fabs(aY) + fabs(aZ));

      if (accelerationRMS > ACCELERATION_RMS_THRESHOLD) {
        // threshold reached, break the loop
        break;
      }
    }
  }

  // use the threshold index as the starting point for the remainder of the data
  capturedSamples = THRESHOLD_SAMPLE_INDEX + NUM_FEATURES_PER_SAMPLE;

  // collect the remaining samples
  while (capturedSamples < TOTAL_SAMPLES) {
    // wait for both acceleration and gyroscope data to be available
    if (lsm6ds.accelerationAvailable() && lsm6ds.gyroscopeAvailable()) {
      // read the acceleration and gyroscope data
      lsm6ds.readAcceleration(aX, aY, aZ);
      lsm6ds.readGyroscope(gX, gY, gZ);

      // insert the new data
      tflInputTensor->data.f[capturedSamples + 0] = (aX + 4.0) / 8.0;
      tflInputTensor->data.f[capturedSamples + 1] = (aY + 4.0) / 8.0;
      tflInputTensor->data.f[capturedSamples + 2] = (aZ + 4.0) / 8.0;
      tflInputTensor->data.f[capturedSamples + 3] = (gX + 2000.0) / 4000.0;
      tflInputTensor->data.f[capturedSamples + 4] = (gY + 2000.0) / 4000.0;
      tflInputTensor->data.f[capturedSamples + 5] = (gZ + 2000.0) / 4000.0;

      capturedSamples += NUM_FEATURES_PER_SAMPLE;
    }
  }

  // Run inferencing
  TfLiteStatus invokeStatus = tflInterpreter->Invoke();

  if (invokeStatus != kTfLiteOk) {
    Serial.println("Invoke failed!");
    while (1);
    return;
  }

  // Loop through the output tensor values from the model
  for (int i = 0; i < NUM_GESTURES; i++) {
    Serial.print(GESTURES[i]);
    Serial.print(": ");
    Serial.println(tflOutputTensor->data.f[i], 6);
  }
  Serial.println();
}
